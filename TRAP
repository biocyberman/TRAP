#!/bin/bash

: '
TRAP - Time-series RNA-seq Analysis Package

Created by Kyuri Jo on 2014-02-05.
Copyright (c) 2014 Kyuri Jo. All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

----------------------------------------------------------------------
'

CONF_FILE="config.txt"

# Read config file and assign values

for i in $(cat $CONF_FILE | \grep -v '#')
do
   var=`echo "$i" | awk -F"=" '{print $1}'`
   param=`echo "$i" | awk -F"=" '{print $2}'`
   eval $var=$param
done

# Print a sample value

echo $'Starting TRAP 2.3.......\n\n###### mRNA Sequencing Data Analysis ######\n'

cuffd=0
cuff=0
top=0
while [ "$cuffdiff" == "yes" ]; do
    read -p "Do you have Cuffdiff results? (y/n) : " yn
    case $yn in
        [Yy]* ) runcuffd=0; break;;
        [Nn]* ) runcuffd=1; break;;
        * ) echo "Please answer y or n";;
    esac
done
while [ "$runcuffd" == 1 ]; do
    read -p "Do you have Cufflinks results? (y/n) : " yn
    case $yn in
        [Yy]* ) runcufflinks=0; break;;
        [Nn]* ) runcufflinks=1; break;;
        * ) echo "Please answer y or n";;
    esac
done
while [ "$runcufflinks" == 1 ]; do
    read -p "Do you have Tophat results? (y/n) : " yn
    case $yn in
        [Yy]* ) runtophat=0; break;;
        [Nn]* ) runtophat=1; break;;
        * ) echo "Please answer y or n";;
    esac
done

current=`pwd`

#================ FUNCTIONS ====================================
function runtophat(){
        runcmd=''
	elem=$1 # name of the sample
	fqfiles="$2" # fastq files in coma-separated list
	threads=${3:-8} # number of threads to run tophat
	outdir=${current}/tophat_result/${elem} 
        if [ "$rsume" == 1 -a -d $outdir ]; then
      		echo "Resuming Tophat for mapping ${elem}"
		runcmd="tophat -R $outdir"
	else

      		echo "Start Tophat for mapping ${elem}"
 	       runcmd="${tophatPath}tophat  --no-novel-juncs -p $threads -z0 -o $outdir -G $gffPath --rg-id $elem --rg-sample $elem --rg-platform 'Proton Data' --rg-center 'AfMD' $refIndex $fqfiles;"
	fi
	echo $runcmd
	eval $runcmd
}

function runcufflinks(){
        echo "Start Cufflinks for ${elem}"
        runcmd=''
	elem=$1 # name of the sample
	threads=${2:-26} # number of threads to run tophat
	outdir=${current}/cufflinks_result/${elem} 
	mkdir -p $outdir
        runcmd="${cuffPath}cufflinks -p $threads -o $outdir -G $gffPath ${current}/tophat_result/${elem}/accepted_hits.bam 2>&1 | tee ${current}/cufflinks_result/${elem}/log.txt"
 	echo $runcmd
	eval $runcmd
}
#================ /FUNCTIONS ===================================

declare -A sampleArray # associative array keeps samples name and paths of data files

if [ "$runtophat" == 1 ]; then
    echo $'\n'

    rsume=0
    while [ "$rsume" == 0 ]; do
	read -p "Do you want to resume incomplete run? (y/n) : " yn
	case $yn in
	    [Yy]* ) rsume=1; break;;
	    [Nn]* ) rsume=0; break;;
	    * ) echo "Please answer y or n";;
	esac
    done


    echo "### Tophat : Mapping reads to reference genome ###"
    echo "Log will be written in tophat_result/SAMPLE/logs directory"

    for (( i=1; i<= $numTP; i++))
    do
	for grp in control treatment
	do 
	   eval con='$'${grp}${i}
	   IFS=',' array=($con)
	   for elem in "${array[@]}"
	   do
	      eval con2='$'$elem'Path'
	      sampleArray[$elem]=$con2
	   done
	done

    done
    # Now runs tophat
    for elem in ${!sampleArray[@]}
    do
	  runtophat $elem ${sampleArray[$elem]} $nthreads
    done

fi

if [ "$usecuffdiff" == "yes" ] && [ "$runcufflinks" == 1 ]; then
    echo $'\n'
    echo "### Cufflinks : Estimating gene expression values ###"	
    echo "Log will be written in cufflinks_result/SAMPLE/log.txt"

    for elem in ${!sampleArray[@]}
    do
	  runcufflinks $elem $nthreads
    done


fi

if [ "$usecuffdiff" == "yes" ] && [ "$runcuffd" == 1 ]; then
    echo "### Cuffdiff : Estimating gene expression values and finding DEGs###"
    echo "Log will be written in cuffdiff_result/SAMPLE/log.txt"

    echo "Start Cuffcompare for making combined gtf file"
    cd ${current}/cuffdiff_result
    eval "${cuffPath}cuffcompare -CG -r ${gffPath} ${gffPath} 2>&1 | tee log_cuffcompare.txt"
    cd ..

    for ((i=1; i<=$numTP; i++))
    do
       eval diff='$diff'$i
       eval con='$control'$i
       conCuff=""
       IFS=',' array=($con)
       for elem in "${array[@]}"
       do
	    conCuff=${conCuff}${current}'/tophat_result/'${elem}'/accepted_hits.bam,'
       done
       conCuff=${conCuff/%,/}
       eval tre='$treatment'$i
       treCuff=""
       IFS=',' array=($tre)
       for elem in "${array[@]}"
       do
	    treCuff=${treCuff}${current}'/tophat_result/'${elem}'/accepted_hits.bam,'
       done
       treCuff=${treCuff/%,/}
       echo $'\n'
       echo "Start Cuffdiff for control${i} and treatment${i}"
       echo "${cuffPath}cuffdiff -p 26 -o cuffdiff_result/${diff} ${current}/cuffdiff_result/cuffcmp.combined.gtf ${conCuff} ${treCuff}";
       mkdir -p cuffdiff_result/${diff}
       eval "${cuffPath}cuffdiff -p 26 -o cuffdiff_result/${diff} ${current}/cuffdiff_result/cuffcmp.combined.gtf ${conCuff} ${treCuff} 2>&1 | tee ${current}/cuffdiff_result/${diff}/log.txt"
    done
fi

python TRAP.py
